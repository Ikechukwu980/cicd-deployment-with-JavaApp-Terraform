def COLOR_MAP = [
    SUCCESS: 'good',
    FAILURE: 'danger'
]

pipeline {
    agent any

    tools {
        maven 'Maven3'
    }
        
    environment {
        registry = '220894557754.dkr.ecr.us-west-2.amazonaws.com/springboot-app'
    }

    stages {
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ikechukwu980/microservice-eks-jenkins.git'
            }
        }
        
        stage('maven Unit Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Integration Test') {
            steps {
                sh 'mvn verify -DskipUnitTest'
            }
        }
        
        stage('Checkstyle Code Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        
        stage('SonarQube Scan') {
            steps {
                sh '''
                mvn sonar:sonar \
                -Dsonar.projectKey=JavaWebApp \
                -Dsonar.host.url=http://54.218.51.246:9000 \
                -Dsonar.login=8a8b813c83e0c6974c35c2216510dae4dfdebc38
                '''
            }
        }
        
        stage('maven build') {
            steps {
                sh 'mvn clean install'
            }
        }
        
        stage ('build image') {
            steps {
                script {
                    docker.build registry
                }
            }
        }
        
        stage('push to ECR') {
            steps {
                sh 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 220894557754.dkr.ecr.us-west-2.amazonaws.com'
                sh 'docker push 220894557754.dkr.ecr.us-west-2.amazonaws.com/springboot-app:latest'
            }
        }
        
        stage('Manual Approval') {
            steps {
                input 'Approval required for deployment'
            }
        }
        
        stage('kubernetes deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'K8S', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                    sh 'ls'
                    sh 'kubectl apply -f eks-deploy-k8s.yaml'
                }
            }
        }
    }
    
    post {
        always {
            echo 'I will always say Hello again!'
            slackSend(
                channel: "#ikechukwu-devops",
                color: COLOR_MAP[currentBuild.currentResult.toString()],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nMore info at: ${env.BUILD_URL}"
            )
        }
    }
}
